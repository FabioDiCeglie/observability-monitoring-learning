services:
  # Datadog Agent - The heart of monitoring
  datadog-agent:
    image: gcr.io/datadoghq/agent:7
    container_name: datadog-agent
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=${DD_SITE:-datadoghq.com}
      - DD_ENV=${DD_ENV:-sandbox}
      - DD_SERVICE=${DD_SERVICE:-datadog-sandbox}
      - DD_VERSION=${DD_VERSION:-1.0.0}
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=${DD_DOGSTATSD_NON_LOCAL_TRAFFIC:-true}
      
      # Enable APM (Application Performance Monitoring)
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      
      # Enable Log Collection
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      
      # Enable Process Monitoring
      - DD_PROCESS_AGENT_ENABLED=true
      
      # Enable Network Performance Monitoring
      - DD_SYSTEM_PROBE_ENABLED=true
      
      # Container monitoring
      - DD_CONTAINER_EXCLUDE_LOGS="name:datadog-agent"
      - DD_DOCKER_LABELS_AS_TAGS='{"com.docker.compose.service":"service"}'
      
      
    volumes:
      # Docker socket for container monitoring
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /etc/passwd:/etc/passwd:ro
      
      # Custom configurations
      - ./datadog/conf.d:/etc/datadog-agent/conf.d:ro
      
    ports:
      - "8125:8125/udp"  # StatsD
      - "8126:8126"      # APM traces
      
    networks:
      - monitoring
    
    labels:
      com.datadoghq.ad.logs: '[{"source": "datadog-agent", "service": "datadog-agent"}]'

  # PostgreSQL Database (simple setup)
  postgres:
    image: postgres:13
    container_name: postgres-db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sandbox_db}
      - POSTGRES_USER=${POSTGRES_USER:-sandbox_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-sandbox_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - monitoring
    
    labels:
      com.datadoghq.ad.check_names: '["postgres"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%","port":"5432","username":"${POSTGRES_USER:-sandbox_user}","password":"${POSTGRES_PASSWORD:-sandbox_password}","dbname":"${POSTGRES_DB:-sandbox_db}"}]'
      com.datadoghq.ad.logs: '[{"source": "postgresql", "service": "postgres"}]'

  # Flask API Application
  flask-api:
    build: 
      context: ./flask-app
      dockerfile: Dockerfile
    container_name: flask-api
    environment:
      - FLASK_ENV=${FLASK_ENV:-development}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-sandbox_user}:${POSTGRES_PASSWORD:-sandbox_password}@postgres:5432/${POSTGRES_DB:-sandbox_db}
      - DD_AGENT_HOST=datadog-agent
      - DD_TRACE_AGENT_PORT=8126
      - DD_ENV=${DD_ENV}
      - DD_SERVICE=flask-api
      - DD_VERSION=${DD_VERSION}
    ports:
      - "5001:5000"
    depends_on:
      - postgres
      - datadog-agent
    networks:
      - monitoring
    
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "flask-api"}]'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    depends_on:
      - flask-api
    networks:
      - monitoring
    
    labels:
      com.datadoghq.ad.check_names: '["nginx"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"nginx_status_url": "http://%%host%%/nginx_status/"}]'
      com.datadoghq.ad.logs: '[{"source": "nginx", "service": "nginx"}]'

  # Redis Cache (Optional)
  redis:
    image: redis:6-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    networks:
      - monitoring
    
    labels:
      com.datadoghq.ad.check_names: '["redisdb"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%","port":"6379"}]'
      com.datadoghq.ad.logs: '[{"source": "redis", "service": "redis"}]'

volumes:
  postgres_data:

networks:
  monitoring:
    driver: bridge
